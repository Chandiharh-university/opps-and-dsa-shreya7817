#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Function to compare edges by their weight
bool compareEdge(Edge e1, Edge e2) {
    return e1.weight < e2.weight;
}

// Structure to represent subsets for union-find
struct Subset {
    int parent;
    int rank;
};

// Find function with path compression
int find(Subset subsets[], int node) {
    if (subsets[node].parent != node)
        subsets[node].parent = find(subsets, subsets[node].parent);
    return subsets[node].parent;
}

// Union function to unite two subsets
void unionSubsets(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Function to calculate MST using Kruskal's Algorithm
void kruskalMST(vector<Edge>& edges, int V) {
    // Sort edges by weight
    sort(edges.begin(), edges.end(), compareEdge);

    // Create subsets for union-find
    Subset* subsets = new Subset[V];
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    vector<Edge> mst;  // To store the MST edges
    int mstWeight = 0; // Total weight of the MST

    // Process edges one by one
    for (const Edge& edge : edges) {
        int x = find(subsets, edge.src);
        int y = find(subsets, edge.dest);

        // If including this edge doesn't cause a cycle
        if (x != y) {
            mst.push_back(edge);
            mstWeight += edge.weight;
            unionSubsets(subsets, x, y);
        }
    }

    // Print the MST
    cout << "\nEdges in the Minimum Spanning Tree:\n";
    for (const Edge& edge : mst) {
        cout << edge.src << " -- " << edge.dest << " == " << edge.weight << endl;
    }
    cout << "Total weight of MST: " << mstWeight << endl;

    delete[] subsets;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<Edge> edges(E);

    cout << "Enter each edge in the format (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        cout << "Edge " << i + 1 << ": ";
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    kruskalMST(edges, V);

    return 0;
}
