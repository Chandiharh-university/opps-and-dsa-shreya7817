#include <iostream>
#include <algorithm>
using namespace std;

// Node structure for the binary tree
struct Node {
    int data;
    Node* left;
    Node* right;
    int height;

    Node(int value) {
        data = value;
        left = right = nullptr;
        height = 1; // Height of a new node is 1
    }
};

// Function to get the height of the tree
int getHeight(Node* node) {
    return node ? node->height : 0;
}

// Function to get the balance factor
int getBalanceFactor(Node* node) {
    return node ? getHeight(node->left) - getHeight(node->right) : 0;
}

// Right rotate
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

// Left rotate
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

// Insert into AVL tree
Node* insertAVL(Node* node, int key) {
    if (!node)
        return new Node(key);

    if (key < node->data)
        node->left = insertAVL(node->left, key);
    else if (key > node->data)
        node->right = insertAVL(node->right, key);
    else
        return node; // Duplicates not allowed

    node->height = max(getHeight(node->left), getHeight(node->right)) + 1;

    int balance = getBalanceFactor(node);

    // Left Left Case
    if (balance > 1 && key < node->left->data)
        return rightRotate(node);

    // Right Right Case
    if (balance < -1 && key > node->right->data)
        return leftRotate(node);

    // Left Right Case
    if (balance > 1 && key > node->left->data) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (balance < -1 && key < node->right->data) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Insert into binary search tree
Node* insertBST(Node* node, int key) {
    if (!node)
        return new Node(key);

    if (key < node->data)
        node->left = insertBST(node->left, key);
    else if (key > node->data)
        node->right = insertBST(node->right, key);

    return node;
}

// In-order traversal
void inOrder(Node* root) {
    if (root) {
        inOrder(root->left);
        cout << root->data << " ";
        inOrder(root->right);
    }
}

// Pre-order traversal
void preOrder(Node* root) {
    if (root) {
        cout << root->data << " ";
        preOrder(root->left);
        preOrder(root->right);
    }
}

// Post-order traversal
void postOrder(Node* root) {
    if (root) {
        postOrder(root->left);
        postOrder(root->right);
        cout << root->data << " ";
    }
}

int main() {
    Node* bstRoot = nullptr;
    Node* avlRoot = nullptr;

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        bstRoot = insertBST(bstRoot, value);
        avlRoot = insertAVL(avlRoot, value);
    }

    cout << "Traversals for Binary Search Tree:" << endl;
    cout << "In-order: ";
    inOrder(bstRoot);
    cout << endl;

    cout << "Pre-order: ";
    preOrder(bstRoot);
    cout << endl;

    cout << "Post-order: ";
    postOrder(bstRoot);
    cout << endl;

    cout << "Traversals for AVL Tree:" << endl;
    cout << "In-order: ";
    inOrder(avlRoot);
    cout << endl;

    cout << "Pre-order: ";
    preOrder(avlRoot);
    cout << endl;

    cout << "Post-order: ";
    postOrder(avlRoot);
    cout << endl;

    return 0;
}
