#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Structure to represent a weighted edge
struct Edge {
    int dest, weight;
};

// Comparator for priority queue
struct Compare {
    bool operator()(pair<int, int> a, pair<int, int> b) {
        return a.second > b.second;
    }
};

void dijkstra(vector<vector<Edge>>& graph, int src, int V) {
    // Distance vector to store the shortest path to each vertex
    vector<int> dist(V, INT_MAX);

    // Priority queue to select the vertex with the smallest distance
    priority_queue<pair<int, int>, vector<pair<int, int>>, Compare> pq;

    // Initialize the source vertex
    dist[src] = 0;
    pq.push({src, 0});

    while (!pq.empty()) {
        int u = pq.top().first;
        int u_dist = pq.top().second;
        pq.pop();

        // Update distances of neighbors of the current vertex
        for (const Edge& edge : graph[u]) {
            int v = edge.dest;
            int weight = edge.weight;

            if (u_dist + weight < dist[v]) {
                dist[v] = u_dist + weight;
                pq.push({v, dist[v]});
            }
        }
    }

    // Print the shortest distances
    cout << "\nVertex\tDistance from Source" << endl;
    for (int i = 0; i < V; i++) {
        cout << i << "\t" << dist[i] << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<Edge>> graph(V);

    cout << "Enter the edges (source, destination, weight):\n";
    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w}); // Remove this line if the graph is directed
    }

    int src;
    cout << "Enter the source vertex: ";
    cin >> src;

    dijkstra(graph, src, V);

    return 0;
}
